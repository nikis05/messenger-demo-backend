# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Message {
  id: ID!
  sender: User!
  text: String!
  respondsTo: Message
  createdAt: DateTime!
  isEdited: Boolean!
}

input MessageCreateInput {
  text: String!
  respondsToId: String
}

input MessageWhereInput {
  before: DateTime
  after: DateTime
  around: ID
}

type Messenger {
  id: ID!
  title: String!
  pinnedMessage: Message
  messages(where: MessageWhereInput!): [Message!]!
  numUnreadMessages: Int!
}

input MessengerCreateInput {
  title: String!
  memberIds: [ID!]!
}

type Mutation {
  """
  Closes all caller's active sessions except current one. To close current
  session, use logOut instead. Returns the remaining (active) session
  """
  closeAllSessionsExceptCurrent: Session!

  """Logs caller out"""
  logOut: Boolean!

  """Registers new user in the system"""
  signUp(
    """Data of created user"""
    input: UserCreateInput!
  ): Tokens!
  logIn(password: String!, login: String!): Tokens!
  changePassword(newPassword: String!, oldPassword: String!): Boolean!
  deleteAccount(password: String!): Boolean!
  createMessenger(input: MessengerCreateInput!): Messenger!
  deleteMessenger(id: ID!): ID!
  leaveMessenger(id: ID!): ID!
  pinMessage(messageId: ID, messengerId: ID!): Messenger!
  markAsRead(messengerId: ID!): Messenger!
  postMessage(input: MessageCreateInput!, messengerId: ID!): Message!
  editMessage(newText: String!, id: ID!): Message!
  deleteMessage(id: String!): ID!
}

type Node {
  id: ID!
}

type Query {
  """Returns the list of all caller's active sessions"""
  sessions: [Session!]!

  """Returns caller's account metadata"""
  self: User!
  user(login: String!): User
  messenger(id: ID!): Messenger!
  messengers: [Messenger!]!
}

type Session {
  id: ID!
  lastUsed: DateTime!
}

type Tokens {
  accessToken: String!
  refreshToken: String!
}

type User {
  id: ID!
  login: String!
}

input UserCreateInput {
  login: String!
  password: String!
}
